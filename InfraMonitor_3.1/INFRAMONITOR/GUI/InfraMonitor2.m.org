function varargout = InfraMonitor2(varargin)
% INFRAMONITOR2 M-file for InfraMonitor2.fig
%      INFRAMONITOR2, by itself, creates a new INFRAMONITOR2 or raises the existing
%      singleton*.
%
%      H = INFRAMONITOR2 returns the handle to a new INFRAMONITOR2 or the handle to
%      the existing singleton*.
%
%      INFRAMONITOR2('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in INFRAMONITOR2.M with the given input arguments.
%
%      INFRAMONITOR2('Property','Value',...) creates a new INFRAMONITOR2 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before InfraMonitor2_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to InfraMonitor2_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help InfraMonitor2

% Last Modified by GUIDE v2.5 12-May-2009 16:57:32

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @InfraMonitor2_OpeningFcn, ...
                   'gui_OutputFcn',  @InfraMonitor2_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before InfraMonitor2 is made visible.
function InfraMonitor2_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to InfraMonitor2 (see VARARGIN)

clear global InfraConfig

h = About;
waitfor(h)

% Choose default command line output for InfraMonitor2
handles.output = hObject;

set(handles.figure1,'KeyPressFcn',@KeyPressFcn)

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes InfraMonitor2 wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = InfraMonitor2_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


function KeyPressFcn(src,evnt)
handles = guidata(src);
keypress = get(handles.figure1, 'CurrentCharacter');

handles = Selecttrace(handles,keypress);

guidata(src, handles);


function Menu_File_Callback(hObject, eventdata, handles)


function Menu_Detect_Callback(hObject, eventdata, handles)


function Menu_Locate_Callback(hObject, eventdata, handles)


function Menu_Locate_Grid_Callback(hObject, eventdata, handles)


function Menu_Locate_Run_Callback(hObject, eventdata, handles)

[selection,ok] = listdlg('Name','Locator',...
    'ListSize',[160 50],...
    'PromptString','Apply Phase Association?',...
    'SelectionMode','single',...
    'ListString',{'yes','no'});

if (ok == 0)
    return
end

global InfraConfig

try
    grid_exist = numel(InfraConfig.grid);
catch
    errordlg('InfraMonitor2: Create or open grid file')
    return
end

if (selection == 1)
    Arrivals = FirstArrivals();
    PlotData(handles,numel(InfraConfig.db.select),1);
else
    try
        Test = numel(InfraConfig.array.select);
        if (Test == 0)
            errordlg('InfraMonitor2: Arrivals must be selected without phase association')
            return
        end
    catch
        errordlg('InfraMonitor2: Arrivals must be selected without phase association')
        return
    end
    Arrivals = AllFirstArrivals();
end

Locate(Arrivals)
msgbox('InfraMonitor2: Completed location processing')


function Menu_Grid_Locate_Open_Callback(hObject, eventdata, handles)


function Menu_Locate_Grid_Save_Callback(hObject, eventdata, handles)
msgbox('InfraMonitor2: CSS3.0 event/polygon tables will be implemented in official release')


function Menu_Detect_Run_Callback(hObject, eventdata, handles)

% Loading global variables:
global InfraConfig

try
    if (numel(InfraConfig.trace.select) == 0)
        errordlg('InfraMonitor2: Select the traces to process')
        return
    end
catch
    errordlg('InfraMonitor2: Must read data before applying detector')
    return
end

% Checking to see if array has already been processed:
for i = 1:numel(InfraConfig.array.trc)
    if (InfraConfig.array.trc{i} == InfraConfig.trace.select)
        button = questdlg('Are you sure you want to overwrite existing detections?');
        if (strcmp(button,'Yes') ~= 1)
            return
        end
        Overwrite = i;
    end
end

InfraUser = open('InfraUser.mat');
InfraUser.slow = linspace(-400,400,40);             % Infrasound

NSeconds = (InfraConfig.db.etime - InfraConfig.db.stime)*86400;
NRuns = ceil(NSeconds/InfraUser.w);

for i = 1:NRuns
    
    if (i == 1)
        stime = InfraConfig.db.stime;
        etime = stime + InfraUser.w/86400;
    else
        stime = etime;
        etime = stime + InfraUser.w/86400;
    end

    t_start = (stime*86400 - InfraConfig.db.stime*86400)*...
        InfraConfig.trace.s_f{InfraConfig.trace.select(1)} + 1;
    F_K = RunFK(InfraUser,stime,min(etime,InfraConfig.db.etime),t_start,i,NRuns);
    
    try
        dofnum = 0.5*(2*InfraUser.twin*(InfraConfig.db.f_band(2)...
            -InfraConfig.db.f_band(1)));
    catch
        errordlg('InfraMonitor2: Must filter data before running detector')
        return
    end
    dofden = 0.5*(2*InfraUser.twin*(InfraConfig.db.f_band(2)...
        -InfraConfig.db.f_band(1)))*(numel(InfraConfig.trace.select)-1);
    [arrivals,C] = Detect(F_K,dofnum,dofden,InfraUser);
    
    try
        j = numel(InfraConfig.array.loc) + 1;
    catch
        j = 1;
    end

    if (i == 1)
        InfraConfig.detect.time{j} = F_K.time;
        InfraConfig.detect.slofk{j} = F_K.slofk;
        InfraConfig.detect.az{j} = F_K.az;
        InfraConfig.detect.fstat{j} = F_K.fstat/C;
        InfraConfig.detect.corr{j} = F_K.corr;
        InfraConfig.detect.trc{j} = InfraConfig.trace.select;
        if (arrivals ~= -999)
            arrivals_all = arrivals;
        end
    else
        InfraConfig.detect.time{j} = cat(2,InfraConfig.detect.time{j},F_K.time);
        InfraConfig.detect.slofk{j} = cat(2,InfraConfig.detect.slofk{j},F_K.slofk);
        InfraConfig.detect.az{j} = cat(2,InfraConfig.detect.az{j},F_K.az);
        InfraConfig.detect.fstat{j} = cat(2,InfraConfig.detect.fstat{j},F_K.fstat/C);
        InfraConfig.detect.corr{j} = cat(2,InfraConfig.detect.corr{j},F_K.corr);
        try
            arrivals_all = cat(1,arrivals_all,arrivals);
        catch
            if (exist('arrivals_all','var') == 0)
                arrivals_all = arrivals;
            end
        end
    end
    
end

if (exist('arrivals_all','var') == 0)
    errordlg('InfraMonitor2: No detections found')
    return
end

try
    InfraConfig.array.loc{Overwrite} = GetArrayLoc(InfraConfig);
    InfraConfig.array.arr{Overwrite} = arrivals_all;
    InfraConfig.array.trc{Overwrite} = InfraConfig.trace.select;
catch
    i = numel(InfraConfig.array.loc);
    i = i + 1;
    InfraConfig.array.loc{i} = GetArrayLoc(InfraConfig);
    InfraConfig.array.arr{i} = arrivals_all;
    InfraConfig.array.trc{i} = InfraConfig.trace.select;
end

delete(handles.axes1);
handles.axes1 = axes('Parent',handles.figure1,'Units','characters',...
    'Position',[8.16667 2.33333 172.667 49.1667]);

PlotData(handles,numel(InfraConfig.db.select),0);
msgbox('InfraMonitor2: Detection Process Completed')
guidata(hObject, handles)


function Menu_Detect_Open_Callback(hObject, eventdata, handles)


function Menu_Detect_Save_Callback(hObject, eventdata, handles)
l = WriteArrivals(0,0);


function Menu_File_Open_Callback(hObject, eventdata, handles)


function Menu_File_Close_Callback(hObject, eventdata, handles)
clear global InfraConfig
delete(handles.axes1);
handles.axes1 = axes('Parent',handles.figure1,'Units','characters',...
    'Position',[8.16667 2.33333 172.667 49.1667]);
set(handles.axes1,'Visible','off')
guidata(hObject, handles);


function Menu_File_Quit_Callback(hObject, eventdata, handles)
user_response = closedlg;
switch user_response
case {'No'}
case 'Yes'
clear global InfraConfig
delete(handles.figure1)
end


function Menu_Locate_Grid_New_Callback(hObject, eventdata, handles)
NewGrid()


function Menu_Locate_Grid_Open_Callback(hObject, eventdata, handles)

global InfraConfig

[filename,pathname] = uigetfile('*.mat','Select grid file...');
if (filename == 0)
    return
end

grid = load([pathname filename]);

try
    InfraConfig.grid = grid.grid;
catch
    errordlg('InfraMonitor2: Incompatible grid file')
    return
end

function File_Save_Callback(hObject, eventdata, handles)

global InfraConfig

[filename,pathname] = uiputfile('Config.mat','Save Configuration file');
if (filename == 0)
    return
end

save([pathname filename],'InfraConfig')



function File_Open_CSS3_Callback(hObject, eventdata, handles)

global InfraConfig

% Obtaining wfdisc file details:
[filename,pathname] = uigetfile('*.wfdisc','Select wfdisc file...');
if (filename == 0)
    return
end

currentdir = [pwd '/'];
if (strcmp(pathname,currentdir) == 0)
    errordlg('Data is not in working directory - change working directory in Matlab')
    return
end

% Storing database information as a structure (db):
ok = Makedb(filename,pathname);
if (ok == -1)
    return
end

% Allowing user selection of traces and time window:
h = Selectdb;
waitfor(h)

% Storing trace data as a structure (trace):
NTrace = numel(InfraConfig.db.select);
Maketrace(NTrace);

try
    % Plotting waveform data:
    InfraConfig.trace.select = [];
    PlotData(handles,NTrace,0);
    guidata(hObject, handles);
end

function File_Open_Configuration_Callback(hObject, eventdata, handles)

global InfraConfig

[filename,pathname] = uigetfile('*.mat','Select configuration file...');
if (filename == 0)
    return
end

load([pathname filename])
PlotData(handles,numel(InfraConfig.db.select),0);


function Menu_Detect_View_Callback(hObject, eventdata, handles)

global InfraConfig

try
    
    % Obtaining Arrivals:
    for i = 1:numel(InfraConfig.array.trc)
        if (numel(find(InfraConfig.array.trc{i} == InfraConfig.trace.select(1))) < 1)
            continue
        else
            arrivals = InfraConfig.array.arr{i}(:,1:2);
            elements = find(InfraConfig.array.arr{i}(:,5)==2);
            arrivals = arrivals(elements,:);
            break
        end
    end

    % Obtaining Additional Detection Parameters:
    for i = 1:numel(InfraConfig.detect.trc)
        if (InfraConfig.detect.trc{i} == InfraConfig.trace.select)
            j = i;
            break
        end
    end

    if (exist('j') ~= 1)
        errordlg('InfraMonitor2: Ensure that corresponding traces are selected!')
        return
    end

    % Obtaining Channel Names:
    for i = 1:numel(InfraConfig.trace.select)
        try
            Chans = strcat([Chans ','],InfraConfig.trace.name{InfraConfig.trace.select(i)});
        catch
            Chans = InfraConfig.trace.name{InfraConfig.trace.select(i)};
        end
    end

    [Selection,ok] = listdlg('PromptString','Select channels to plot:',...
        'ListString',list2cell(Chans));
    
    if (exist('arrivals') == 0)
        arrivals = -999;
    end
    
    IMPlot(arrivals,Chans,Selection,j);
catch
    errordlg('InfraMonitor2: Ensure that detector has been run and corresponding traces are selected!')
end


function Menu_File_Print_Callback(hObject, eventdata, handles)
set(gcf,'PaperPositionMode','auto')
printpreview


function Menu_Filter_Apply_Callback(hObject, eventdata, handles)
global InfraConfig

% Obtaining filter band:
filtering = inputdlg({'InfraMonitor2: Enter filter band','Enter Order'},...
    'Filtering',1,{'1,5','2'});
try
    f_band = list2array(filtering{1});
    order = str2double(filtering{2});
catch
    return
end
 
% Filtering data:
try
    NTrace = numel(InfraConfig.trace.s_f);
catch
    errordlg('InfraMonitor2: Ensure that data are read in')
    return
end

for i = 1:NTrace
    if (numel(f_band) > 1)
        [b,a] = butter(order,[f_band(1) f_band(2)]/InfraConfig.trace.s_f{i});
    else
        [b,a] = butter(order,f_band(1)/ceil(InfraConfig.trace.s_f{i}/2),'high');
    end
    InfraConfig.trace.data_orig{i} = InfraConfig.trace.data{i};
    InfraConfig.trace.data{i} = filter(b,a,InfraConfig.trace.data{i});
end
delete(handles.axes1);
handles.axes1 = axes('Parent',handles.figure1,'Units','characters',...
    'Position',[8.16667 2.33333 172.667 49.1667]);
 
InfraConfig.db.f_band = f_band;
 
PlotData(handles,NTrace,0)
guidata(hObject, handles)


function Menu_Filter_Undo_Callback(hObject, eventdata, handles)

global InfraConfig

try
    NTrace = numel(InfraConfig.trace.s_f);
catch
    errordlg('InfraMonitor2: Ensure that data are read in')
end

for i = 1:NTrace
    InfraConfig.trace.data{i} = InfraConfig.trace.data_orig{i};
end

delete(handles.axes1);
handles.axes1 = axes('Parent',handles.figure1,'Units','characters',...
    'Position',[8.16667 2.33333 172.667 49.1667]);

InfraConfig.db.f_band = [];
PlotData(handles,NTrace,0)
guidata(hObject, handles)


function Menu_Tools_Filter_Callback(hObject, eventdata, handles)


function Menu_Tools_Callback(hObject, eventdata, handles)


function Menu_Tools_Zoom_Callback(hObject, eventdata, handles)


function Menu_Zoom_On_Callback(hObject, eventdata, handles)
zoom on


function Menu_Zoom_Off_Callback(hObject, eventdata, handles)
zoom off


function Menu_Tools_Unselect_Callback(hObject, eventdata, handles)
global InfraConfig
 
InfraConfig.array.select = [];
try
    PlotData(handles,numel(InfraConfig.db.select),1);
catch
    return
end


function Menu_Tools_Plot_Callback(hObject, eventdata, handles)


function Menu_Plot_Spectra_Callback(hObject, eventdata, handles)

global InfraConfig

try
    traces = InfraConfig.trace.select;
catch
    errordlg('InfraMonitor2: Ensure that data are read in')
    return
end

if (numel(traces) == 0)
    errordlg('InfraMonitor2: Ensure that traces of interest are selected!')
    return
end

[x,y] = ginput(2);

try
    traces = InfraConfig.trace.select;
    for i = 1:numel(traces)
        figure
        [u,i1] = min(abs(x(1)-InfraConfig.trace.time{traces(i)}));
        [u,i2] = min(abs(x(2)-InfraConfig.trace.time{traces(i)}));
        Hs=spectrum.mtm(4);
        psd(Hs,InfraConfig.trace.data{traces(i)}(i1:i2),'Fs',InfraConfig.trace.s_f{traces(i)})
        title(InfraConfig.trace.name{traces(i)});
    end
catch
    errordlg('InfraMonitor2: Ensure that traces of interest are selected!')
end


function Menu_Plot_Spectrogram_Callback(hObject, eventdata, handles)

global InfraConfig
 
try
    traces = InfraConfig.trace.select;
catch
    errordlg('InfraMonitor2: Ensure that data are read in')
    return
end

if (numel(traces) == 0)
    errordlg('InfraMonitor2: Ensure that traces of interest are selected!')
    return
end

[selection,ok] = listdlg('Name','Spectrogram',...
    'ListSize',[160 100],...
    'PromptString','nfft:',...
    'SelectionMode','single',...
    'ListString',{'64','128','256','512','1024','2048'});

if (ok == 0)
    return
end

nfft_choices = [64 128 256 512 1024 2048];
nfft = nfft_choices(selection);

[x,y] = ginput(2);

for i = 1:numel(traces)
    figure
    subplot(2,1,1);
    [u,i1] = min(abs(x(1)-InfraConfig.trace.time{traces(i)}));
    [u,i2] = min(abs(x(2)-InfraConfig.trace.time{traces(i)}));
    plot(InfraConfig.trace.data{traces(i)}(i1:i2),'k')
    axis('tight')
    set(gca,'XTick',[])
    ylabel('Norm. Amplitude')
    title(InfraConfig.trace.name{traces(i)});
    subplot(2,1,2);
    try
        spectrogram(InfraConfig.trace.data_orig{traces(i)}(i1:i2),...
            nfft,50,nfft,InfraConfig.trace.s_f{traces(i)},'yaxis');
    catch
        spectrogram(InfraConfig.trace.data{traces(i)}(i1:i2),...
            nfft,50,nfft,InfraConfig.trace.s_f{traces(i)},'yaxis');
    end
    XLabels = get(gca,'XTickLabel');
    stime = InfraConfig.trace.time{traces(i)}(i1);
    for j = 1:size(XLabels,1)
        XLabelsOut(j,:) = datestr(stime + str2double(XLabels(j,:))/86400,13);
    end
    set(gca,'XTickLabel',XLabelsOut)
end

function Menu_Tools_GT_Callback(hObject, eventdata, handles)
global InfraConfig
 
GT = inputdlg({'Event Location','Origin Time','Group velocities'},...
    'Ground Truth',1,{'lat,lon','mm/dd/yyyy HH:MM:SS','0.28,0.34'});

if (numel(GT) == 0)
    return
end
 
try
    InfraConfig.gt.loc0 = list2array(GT{1});
    InfraConfig.gt.t0 = datenum(GT{2},'mm/dd/yyyy HH:MM:SS');
    InfraConfig.gt.v_g = list2array(GT{3});
catch
    errordlg('InfraMonitor2: Invalid format for ground truth')
    return
end

try
    PlotData(handles,numel(InfraConfig.db.select),1);
catch
    return
end

function Menu_Tools_Prefs_Callback(hObject, eventdata, handles)
h = IMPrefs;
waitfor(h)

function Menu_Tools_About_Callback(hObject, eventdata, handles)
h = About;
waitfor(h)


function Menu_Locate_View_Callback(hObject, eventdata, handles)

global InfraConfig

[filename,pathname] = uigetfile('*.IMpoly','Select polygon file...');
if (filename == 0)
    return
end

poly = load([pathname filename],'-ascii');
polyids = unique(poly(:,1));

for i = 1:numel(polyids)
    choices{i} = num2str(polyids(i));
end

[selection,ok] = listdlg('Name','Location Polygons',...
    'ListSize',[160 100],...
    'PromptString','Select Polygon(s):',...
    'SelectionMode','multiple',...
    'ListString',choices);

if (ok == 0)
    return
end

polyids = polyids(selection);

figure
worldmap(InfraConfig.grid.glat,InfraConfig.grid.glon);
hold on

for i = 1:numel(InfraConfig.array.loc)
    plotm(InfraConfig.array.loc{i}(1),InfraConfig.array.loc{i}(2),'k^',...
        'MarkerFaceColor','y')
end

for i = 1:numel(polyids)
    u = find(poly(:,1) == polyids(i));
    plotm(poly(u,3),poly(u,4),'r')
end


% --------------------------------------------------------------------
function Menu_Zoom_Magnify_Callback(hObject, eventdata, handles)
% hObject    handle to Menu_Zoom_Magnify (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

global InfraConfig

NTrace = numel(InfraConfig.trace.s_f);
mag = inputdlg('Magnification Factor','1');

delete(handles.axes1);
handles.axes1 = axes('Parent',handles.figure1,'Units','characters',...
    'Position',[8.16667 2.33333 172.667 49.1667]);

InfraConfig.mag = str2double(mag);
PlotData(handles,NTrace,0)
guidata(hObject, handles)
